<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- Execution Job. -->
	<batch:job id="dataJob">
		<batch:step id="step1" next="step2">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" processor="itemProcessor"
					writer="mysqlItemWriter" commit-interval="${batch.process.commit.interval}">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step2">
			<batch:tasklet>
				<batch:chunk reader="mysqlReader" writer="finalWriter"
					commit-interval="${batch.process.commit.interval}">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="itemProcessor" class="com.ef.processor.ItemRecordProcessor" />

	<!-- CSV Reader -->
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">

		<!-- Read a csv file -->
		<property name="resource" value="file:${batch.process.csv.file}" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="column1,column2,column3,column4,column5" />
						<property name="delimiter" value="|" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- map to an object -->
					<bean class="com.ef.util.MapFieldSetMapper" />
				</property>
			</bean>
		</property>
	</bean>

	<!-- Database writer. -->
	<bean id="mysqlItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[
            	INSERT INTO ip_requests (date, ip_address, request, status, user_agent) 
            	VALUES (:column1, :column2, :column3, :column4, :column5)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean class="com.ef.util.MapItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<bean id="mysqlReader"
		class="org.springframework.batch.item.database.JdbcCursorItemReader"
		>
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
			<![CDATA[
				select tb.ip_address, tb.cuenta quantity from (
				select date, ip_address, count(*) cuenta from ip_requests 
				GROUP BY ip_address ORDER BY ip_address
				) tb where tb.cuenta > ${threshold}
			]]>
			</value>
		</property>
		<property name="rowMapper">
			<bean class="com.ef.util.IpRequestRowMapper" />
		</property>
	</bean>
	
	<bean id="finalWriter" 
		class="com.ef.util.StdoutWriter" />

	<!-- stored job-metadata in memory -->
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<!-- Job launcher. -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

</beans>